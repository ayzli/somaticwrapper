# Combine VCF files from several callers into one
# The following files are combined:
# * strelka SNV
# * varscan SNV
# * varscan indel (aka varindel)
# * pindel indel

# filter_xargs are strings which will be passed directly to merge_filter. --debug and --bypass may be passed this way
# $bypass is an optional flag which if set will bypass the filter and retain all reaads

# After merging, we filter to retain only those SNVs which are called by both strelka and varscan


# CWL-specific changes
# * Get rid of unused arguments
# * pass all input VCFs
# * Output port: merged/merged.filtered.vcf

sub merge_vcf {
    my $sample_full_path = shift;
    my $job_files_dir = shift;
    my $filter_dir = shift;
    my $REF = shift;
    my $gatk_jar = shift;

    my $strelka_snv_vcf = shift;
    my $varscan_indel_vcf = shift;
    my $varscan_snv_vcf = shift;
    my $pindel_vcf = shift;
    my $filter_xargs = shift;

    my $bsub = "bash";
    $current_job_file = "j8_merge_vcf.sh";
    my $filter_results = "$sample_full_path/merged";
    system("mkdir -p $filter_results");


    my $merger_out_tmp = "$filter_results/merged.vcf";
    my $merger_out = "$filter_results/merged.filtered.vcf";


    my $outfn = "$job_files_dir/$current_job_file";
    print STDERR "Writing to $outfn\n";
    open(OUT, ">$outfn") or die $!;

    print OUT <<"EOF";
#!/bin/bash
export JAVA_OPTS=\"-Xmx2g\"
 java \$JAVA_OPTS -jar $gatk_jar -R $REF -T CombineVariants -o $merger_out_tmp --variant:varscan $varscan_snv_vcf --variant:strelka $strelka_snv_vcf --variant:varindel $varscan_indel_vcf --variant:pindel $pindel_vcf -genotypeMergeOptions PRIORITIZE -priority strelka,varscan,pindel,varindel

# Evaluate return value see https://stackoverflow.com/questions/90418/exit-shell-script-based-on-process-exit-code
rc=\$?
if [[ \$rc != 0 ]]; then
    >&2 echo Fatal error \$rc: \$!.  Exiting.
    exit \$rc;
fi
 
echo Merged unfiltered VCF written to $merger_out_tmp

echo Filter merged VCF file to exclude snv calls generated by just one caller.
export PYTHONPATH="$filter_dir:\$PYTHONPATH"
bash $filter_dir/run_merged_filter.sh $filter_xargs $merger_out_tmp $merger_out 

rc=\$?
if [[ \$rc != 0 ]]; then
    >&2 echo Fatal error \$rc: \$!.  Exiting.
    exit \$rc;
fi

echo Written final result to $merger_out

EOF

    close OUT;
    my $bsub_com = "$bsub < $job_files_dir/$current_job_file\n";
    print STDERR "Executing:\n $bsub_com \n";

    my $return_code = system ( $bsub_com );
    die("Exiting ($return_code).\n") if $return_code != 0;
}

1;
