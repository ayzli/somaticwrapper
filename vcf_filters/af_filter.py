from common_filter import *
import sys

# Filter VCF files according to various AF fields obtained during VEP annotation
# see https://useast.ensembl.org/info/docs/tools/vep/script/vep_options.html#opt_af
#
# Assuming CSQ field (generated by VEP) exists in input VCF.  Exit with error if not
#
# the following parameters are required:
# * xxx
#
# These may be specified on the command line (e.g., --min_depth 10) or in
# configuration file, as specified by --config config.ini  Sample contents of config file:
#   [read_depth]
#   min_depth = 10
#
# Required command line parameter:
# --XXX xxxxxx - specifies tool used for variant call. 'strelka', 'varscan', 'pindel'
#
# optional command line parameters
# --debug
# --config config.ini

class AFFilter(ConfigFileFilter):
    'Filter variant sites by AF fields as provided by VEP annotation'

    name = 'af'

    @classmethod
    def customize_parser(self, parser):
        parser.add_argument('--debug', action="store_true", default=False, help='Print debugging information to stderr')
        parser.add_argument('--config', type=str, help='Optional configuration file')

    def __init__(self, args):
        # These will not be set from config file (though could be)
        self.debug = args.debug

        # Read arguments from config file first, if present.
        # Then read from command line args, if defined
        # Note that default values in command line args would
        #   clobber configuration file values so are not defined
        config = self.read_config_file(args.config)

        #self.set_args(config, args, "min_depth", arg_type="int")

        # below becomes Description field in VCF
# TODO: fill this in
#        self.__doc__ = "Retain calls where read depth in tumor and normal > %d " % (self.min_depth)

    def filter_name(self):
        return self.name

    def parse_CSQ(self, record):
        '''Read CSQ field of VCF and return dictionary'''

        if not "CSQ" in record.INFO: 
            raise Exception( "CSQ field not found.  Was this VCF generated by VEP? ")
        CSQ = record.INFO['CSQ']
        eprint("CSQ has %d entries" % len(CSQ))
#        if self.debug:
#            eprint("CSQ = %s" % CSQ)

         


    def __call__(self, record):

        CSQ = self.parse_CSQ(record)

#        if (self.debug):
#            eprint("Normal, Tumor depths: %d, %d" % (depth_N, depth_T))

#        if depth_N < self.min_depth:
#            if (self.debug): eprint("** Failed NORMAL min_depth = %d ** " % depth_N)
#            return "depth_N: %d" % depth_N
#        if depth_T < self.min_depth:
#            if (self.debug): eprint("** Failed TUMOR min_depth = %d ** " % depth_T)
#            return "depth_T: %d" % depth_T
#
#        if (self.debug):
#            eprint("** Passes read depth filter **")

